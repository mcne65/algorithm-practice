/*

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms.

fiboEvenSum(10) should return 44.
fiboEvenSum(18) should return 3382.
fiboEvenSum(23) should return 60696. -- only this one fails
fiboEvenSum(43) should return 350704366.
Your function should return an even value.

*/
let testCases = {
  10: 44,
  18: 3382,
  23: 60696,
  43: 350704366,
};

function fiboEvenSum(n) {
  if (n === 0 || n === 1) {
    return 0;
  }

  let sum = 0;
  let termCount = 0;

  let prev = 0;
  let curr = 1;
  let temp;

  while (termCount <= n) {
    if (curr % 2 === 0) {
      sum += curr;
    }

    temp = curr;
    curr += prev;
    prev = temp;

    termCount++;
  }

  return sum;
}

function tester(testCases, call) {
  for (let key in testCases) {
    console.log(`\n${key} ::: ${testCases[key]}`);
    if (testCases[key] === call(key)) {
      console.log('pass');
    } else {
      console.error('fail :: ', call(key));
    }
  }
}
tester(testCases, fiboEvenSum);
